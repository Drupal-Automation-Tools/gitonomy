{% extends "GitonomyFrontendBundle::layout.html.twig" %}

{% block title project.name %}

{% block content_javascript %}
    <script>
        data = {{ data|json_encode|raw }};

        var cell_size = 21.5,
            height = data.length * cell_size,
            width  = $("#history").width(),
            cell_width = Math.floor(width/cell_size)
        ;

        var xAxis = d3.scale.linear()
            .domain([0, cell_width])
            .range([width - cell_size/2, cell_size/2])
        ;

        var yAxis = d3.scale.linear()
            .domain([0, data.length])
            .range([cell_size/2, height - cell_size/2])
        ;

        var history = d3.select("#history")
            .append('svg')
            .attr('width', width)
            .attr('height', height)
        ;

        var graph = commit_graph(data);

        var commits = history
            .selectAll('circle')
            .data(graph.nodes())
        ;

        var links = history
            .selectAll('path')
            .data(graph.links())
        ;

        var commit_line = d3.svg.line()
            .x(function (d) {
                return xAxis(d.x);
            })
            .y(function (d) {
                return yAxis(d.y);
            })
        ;

        var g = commits.enter().append('g');

        g.append('circle')
            .attr('cx', function (node) {
                return xAxis(node.x);
            })
            .attr('cy', function (node) {
                return yAxis(node.y);
            })
            .attr('r', 4)
        ;

        links.enter()
            .append('path')
            .attr('d', commit_line)
            .style('stroke', 'black')
            .style('stroke-width', '1')
            .attr('radius', 0.1)
            .style('fill', 'none')
        ;

        /**
         * Algorithm to generate a graph
         */
        function commit_graph(commits) {
            var links = [];

            {
                var positions = {},
                    matrix = [],
                    position,
                    drawn = [],
                    link
                ;

                // Preparation
                commits.forEach(function (commit, i) {
                    commits[i].position = i;
                    commits[i].x = -1;
                    commits[i].y = i;
                    commits[i].children = [];

                    positions[commit.hash] = i;
                    matrix[i] = [];
                });

                // Children computing
                commits.forEach(function (commit, i) {
                    commit.parents.forEach(function (parent) {
                        if (positions[parent] == undefined) {
                            return;
                        }

                        position = positions[parent];
                        commits[position].children.push(commit.hash);
                    });
                });

                // Weight computing
                commits.forEach(function (commit, i) {
                    computeWeight(commit.hash);
                });

                // Draw
                commits.forEach(function (commit, i) {
                    matrix_draw(i);
                });

                function computeWeight(hash) {
                    if (positions[hash] == undefined) {
                        return 1;
                    }

                    if (commits[positions[hash]].weight != undefined) {
                        return commits[positions[hash]].weight;
                    }

                    var weight = 1;
                    commits[positions[hash]].parents.forEach(function (parent) {
                        weight = Math.max(weight, computeWeight(parent) + 1);
                    });

                    commits[positions[hash]].weight = weight;

                    return weight;
                };

                function matrix_hashHeight(position, hash) {
                    var i = 0;
                    while (matrix[position][i] != hash && matrix[position][i] != undefined) {
                        i++;
                    }

                    matrix[position][i] = hash;

                    return i;
                };

                function matrix_draw(position) {
                    drawn[position] = true;
                    var commit = commits[position];
                    var x = matrix_hashHeight(position, commit.hash);
                    commit.x = x;

                    var parents = commit.parents;

                    parents.sort(function (a, b) {
                        return a.weight < b.weight;
                    });

                    parents.forEach(function (parent) {
                        if (positions[parent] == undefined) {
                            return;
                        }

                        if (drawn[positions[parent]] == undefined) {
                            matrix_draw(positions[parent]);
                        }

                        matrix_connect(commit.hash, parent);
                    });
                };

                function matrix_connect(from, to) {
                    if (positions[from] == undefined || positions[to] == undefined) {
                        return;
                    }

                    var fromX = commits[positions[from]].x;
                    var fromY = commits[positions[from]].y;
                    var toX   = commits[positions[to]].x;
                    var toY   = commits[positions[to]].y;
                    var x,y;

                    for (y = fromY; y < toY - 1; y++) {
                        x = matrix_hashHeight(y + 1, to);
                        links.push([
                            {x: fromX, y: y},
                            {x: x, y: y + 1}
                        ]);
                        fromX = x;
                    }

                    links.push([
                        {x: fromX, y: y},
                        {x: toX,   y: y + 1}
                    ]);
                };
            }

            return {
                nodes: function () {
                    return commits;
                },

                links: function () {
                    return links;
                }
            };
        }
    </script>
{% endblock %}

{% block content %}
    <div class="page-header">
        <h1>{{ project.name }}</h1>
    </div>
    {% render "GitonomyFrontendBundle:Project:blockNavigation" with {slug: project.slug, active: 'history', reference: reference } %}
    <div class="page-header">
        <h2>
            History
            {% if reference != null %}
                <small>
                    {{ reference }} - <a href="{{ path('gitonomyfrontend_project_history', {slug: project.slug}) }}">view all</a>
                </small>
            {% else %}
            {% endif %}
        </h2>
    </div>
    <div class="row">
        <div class="span2">
            <div id="history">
            </div>
        </div>
        <div class="span14">
            <table class="commit-list">
                <tbody>
                    {% for i, commit in commits %}
                        <tr>
                            <td class="message">
                                {% for branch in data[i].branches %}
                                    <span class="label label-success">{{ branch }}</span>
                                {% endfor %}
                                <a title="{{ commit.message }}" href="{{ path('gitonomyfrontend_project_showCommit', {'slug': project.slug, 'hash': commit.hash }) }}">
                                    {{ commit.shortMessage }}
                                </a>
                            </td>
                            <td class="author">
                                {{ commit.authorName }}
                                <img class="avatar" src="{{ gravatar(commit.authorEmail, 16) }}" alt="{{ commit.authorName }}" title="{{ commit.authorName }}" />
                            </td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
{% endblock %}
